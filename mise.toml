[settings]
experimental = true # Required to use lockfile.
lockfile = true     # DO NOT FORGET TO `touch mise.lock` if mise.lock does not exist!


[tools]
neovim = ['latest', 'sub-0.1:latest', '0.9']
'asdf:mise-plugins/mise-lua' = '5.1'

#--- Generate
# Universal markup converter
pandoc = 'latest'

#--- Format
# An opinionated Lua code formatter.
stylua = 'latest'

#--- Lint
# Static checker for GitHub Actions workflow files.
actionlint = 'latest'
# A blazing-fast modern Lua linter written in Rust.
'ubi:Kampfkarren/selene' = 'latest'

#--- Release
# A highly customizable Changelog Generator that follows Conventional Commit specifications.
git-cliff = 'latest'
# GitHub's official command line tool.
gh = 'latest'


[env]
NVIM_APPNAME = 'nvim' # Enforce Neovim app name to be 'nvim' for tests.


[tasks.'changelog:skip-commit']
description = 'Add commit hash to .cliffignore to exclude from CHANGELOG'
usage = 'arg "<commit>" help="Git revision (e.g. HEAD or a1b2c4d)"'
run = 'git rev-parse --verify "${usage_commit}" >> .cliffignore'

[tasks.'deps:tests:restore']
description = 'Restore lazy.nvim dependencies for tests'
shell = 'bash -eo pipefail -c'
run = '''
nvim -l tests/run.lua --lazy-restore
# Workaround https://github.com/folke/lazy.nvim/issues/1787#issuecomment-2466916283.
git checkout -- tests/.config/nvim/lazy-lock.json
nvim -l tests/run.lua --lazy-restore
'''

[tasks.'deps:tests:update']
description = 'Update lazy.nvim dependencies for tests'
run = 'nvim -l tests/run.lua --lazy-update'

[tasks.generate]
description = 'Generate everything'
depends = ['generate:*']

[tasks.fmt]
description = 'Format all files'
depends = ['fmt:*']

[tasks.lint]
description = 'Run all linters'
depends = ['lint:*']

[tasks.test]
description = 'Run all tests'
depends = ['test:*']

[tasks.default]
description = 'Run all linters and tests'
depends = ['lint:*', 'test:*']

[tasks.ci]
description = 'Run all CI tasks'
depends = ['generate', 'fmt', 'lint', 'test']
run = '! git status --porcelain | tee /dev/stderr | grep -q .' # Is working tree clean after fmt?

[tasks.'generate:panvimdoc']
description = 'Generate panvimdoc documentation'
env.DIR = '.cache/panvimdoc'
shell = 'bash -eo pipefail -c'
run = '''
VER="$(cat .panvimdoc.version)"
test -d $DIR || git clone https://github.com/kdheepak/panvimdoc $DIR
git -C $DIR checkout $VER 2>/dev/null || (git -C $DIR fetch && git -C $DIR checkout $VER)
GITHUB_ACTIONS= $DIR/panvimdoc.sh \
    --project-name "$(basename "$PWD" .nvim)" \
    --description 'NORMAL and CMDLINE modes support in Russian keyboard layout' \
    --input-file README.md \
    --shift-heading-level-by -1
'''

[tasks.'fmt:stylua']
description = 'Format Lua code'
run = 'stylua .'

[tasks.'lint:workflows']
description = 'Lint GitHub Action workflows'
run = 'actionlint'

[tasks.'lint:stylua']
description = 'Check Lua code formatting'
run = 'stylua --check .'

[tasks.'lint:selene']
description = 'Lint Lua files'
run = 'selene .'

[tasks.'test:latest']
description = 'Run tests for a whole project with latest Neovim version'
tools.neovim = 'latest'
run = 'nvim -l tests/run.lua --minitest'

[tasks.'test:previous']
description = 'Run tests for a whole project with previous Neovim version'
tools.neovim = 'sub-0.1:latest'
run = 'nvim -l tests/run.lua --minitest'

[tasks.'test:0_9']
description = 'Run tests for a whole project with Neovim 0.9'
tools.neovim = '0.9'
run = 'nvim -u tests/shim_nvim-0.9.lua -l tests/run.lua --minitest'
