*ruscmd.txt*       NORMAL and CMDLINE modes support in Russian keyboard layout

==============================================================================
Table of Contents                                   *ruscmd-table-of-contents*

1. About                                                        |ruscmd-about|
2. Features                                                  |ruscmd-features|
3. Installation                                          |ruscmd-installation|
  - lazy.nvim                                  |ruscmd-installation-lazy.nvim|
4. Setup                                                        |ruscmd-setup|
5. Configuration                                        |ruscmd-configuration|
6. Usage                                                        |ruscmd-usage|
7. Troubleshooting                                    |ruscmd-troubleshooting|
  - Command-line commands without args does not work|ruscmd-troubleshooting-command-line-commands-without-args-does-not-work|
8. See also                                                  |ruscmd-see-also|

==============================================================================
1. About                                                        *ruscmd-about*

Neovim plugin to use NORMAL and CMDLINE modes with Russian keyboard layout.

With this plugin you can avoid switching between Russian/English keyboard
layouts when you need to enter:

- almost any command in NORMAL mode;
- frequently used (it’s configurable) command in Command-line mode.


==============================================================================
2. Features                                                  *ruscmd-features*

- Supported Neovim versions: 0.9.0+.
- Supported Russian keyboard layouts: ЙЦУКЕН.
- Support all NORMAL mode keys except (keys are shown in English layout):
      ----------------------------------------------------------------------------
      Key       English layout                   Russian layout
      --------- -------------------------------- ---------------------------------
      Shift-\   \| - to screen column [count] in / - search forward
                the current line                 
      /         / - search forward               . - repeat last change
      Shift-/   ? - search backward              , - repeat latest f, t, F or T in
                                                 opposite direction
      Shift-2   @ - execute the contents of      " - use {register} for next
                register                         delete, yank or put
      Shift-4   $ - to the end of the line       ; - repeat latest f, t, F or T
                                                 [count] times
      Shift-6   ^ - to the first non-blank       : - command-line mode
                character of the line            
      Shift-7   & - repeat last substitute       ? - search backward
      ----------------------------------------------------------------------------
- Support user-provided global mappings. Neovim global |default-mappings| are
    enabled by default:
    - `Y-default`
    - `v_Q-default`
    - `gc-default v_gc-default o_gc-default`
    - `gcc-default`
    - `]d-default`
    - `[d-default`
    - `CTRL-W_d-default`
    - `K-lsp-default`
- Support user-provided command-line mode commands. These commands are enabled by
    default:
    - `bd`
    - `bn`
    - `q`
    - `qa`
    - `w`
    - `wq`
    - `wqa`


==============================================================================
3. Installation                                          *ruscmd-installation*

Install the plugin with your preferred package manager:


LAZY.NVIM                                      *ruscmd-installation-lazy.nvim*

>lua
    return {
        'powerman/ruscmd.nvim',
        opts = {
            -- Your configuration here, if any.
        },
    }
<


==============================================================================
4. Setup                                                        *ruscmd-setup*

You should call `setup()` to start using the plugin (package managers
configured as shown above will do this for you).

>lua
    require('ruscmd').setup {
        -- Your configuration here, if any.
    }
<


==============================================================================
5. Configuration                                        *ruscmd-configuration*

>lua
    local defaults = {
        cabbrev = { 'bd', 'bn', 'q', 'qa', 'w', 'wq', 'wqa' },
        map = { -- :help default-mappings
            n = { 'Y', 'gc', 'gcc', ']d', '[d', '<C-W>d', 'K' },
            v = {},
            x = { 'Q', 'gc' },
            s = {},
            o = { 'gc' },
            i = {},
            l = {},
            c = {},
            t = {},
        },
    }
<

Example. Add more commands and global mappings:

>lua
    require('ruscmd').setup {
        cabbrev = { 'tabnew', 'Lazy' },
        map = {
            n = { 'sa', ']c', '[c' },
        },
    }
<

Example. Disable default commands and global mappings:

>lua
    require('ruscmd').setup {
        replace = true, -- If true then user-provided keys will replace defaults for these keys.
        cabbrev = {},
        map = {
            n = {},
            x = {},
            o = {},
        },
    }
<


==============================================================================
6. Usage                                                        *ruscmd-usage*

Just do not switch from Russian to English keyboard layout in most cases.


==============================================================================
7. Troubleshooting                                    *ruscmd-troubleshooting*


COMMAND-LINE COMMANDS WITHOUT ARGS DOES NOT WORK*ruscmd-troubleshooting-command-line-commands-without-args-does-not-work*

If simple commands without args like `:й` (`:q`) does not work then most
likely reason is a conflict between `cabbrev` used by this plugin and `cnoremap
<CR>` used by some other plugin (e.g. one implementing completions for the
command-line mode).

The right fix is to ask that other plugin author to change `cnoremap <CR>` to
`cmap <CR>`. Sometimes you can work around this in your nvim config, see
example for nvim-cmp <https://github.com/hrsh7th/nvim-cmp/issues/2072>.


==============================================================================
8. See also                                                  *ruscmd-see-also*

- Why do we need such a plugin: <https://github.com/neovim/neovim/issues/27776>.
- Similar plugin for Vim: <https://github.com/powerman/vim-plugin-ruscmd>.
- Alternative plugin for Neovim: <https://github.com/Wansmer/langmapper.nvim>.

Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
